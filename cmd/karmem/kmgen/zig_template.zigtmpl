{{define "header"}}
const std = @import("std");
const karmem = @import("{{.Import}}");
const testing = std.testing;
const Allocator = std.mem.Allocator;
const mem = @import("std").mem;
{{end}}

{{define "enums"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
    {{- range $root := .}}

pub const Enum{{$root.Name}} = enum({{$root.Type}}) {
  {{- range $field := $root.Fields }}
    {{$field.Name}} = {{$field.Value}},
  {{- end }}
};

const DefaultEnum{{$root.Name}} = Enum{{$root.Name}}.{{(index $root.Fields 0).Name}};

    {{- end}}
{{end}}

{{define "enums_builder"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

{{end}}

{{define "struct"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}

pub const EnumPacketIdentifier = enum(u64) {
  {{- range $root := .}}
    {{$root.Name}} = {{$root.ID}},
  {{- end }}
};

    {{range $root := .}}
pub const {{$root.Name}} = struct {
{{- range $field := $root.Fields }}
    {{ $field.Name }}: {{$field.Type}},

    {{- if $field.IsSlice }}
    _{{ $field.Name }}Capacity: usize,
    {{- end }}
{{- end }}

    pub fn PacketIdentifier() EnumPacketIdentifier {
        return EnumPacketIdentifier.{{$root.Name}};
    }  

    pub fn Reset(x: *{{$root.Name}}) void {
        if (x == undefined) {
            return;
        }

{{- range $field := $root.Fields }}
{{- if $field.IsBasic }}
    {{- if or $field.IsNative $field.IsEnum }}
        {{- if $field.IsEnum}}
        x.{{ $field.Name }} = Default{{$field.Type}};
        {{- else }}
        x.{{ $field.Name }} = {{$field.Default}};
        {{- end}}
    {{- else}}
        {{ $field.PlainType }}.Reset(&x.{{$field.Name}});
    {{- end}}
{{- end }}
{{- if $field.IsArray }}
    {{- if not $field.IsNative}}
        var __{{$field.Name}}Index: usize = 0;
        while (__{{$field.Name}}Index < x.{{$field.Name}}.len) {
            {{$field.PlainType}}.Reset(&x.{{$field.Name}}[__{{$field.Name}}Index]);
            __{{$field.Name}}Index = __{{$field.Name}}Index + 1;
        }
    {{- else}}
        x.{{$field.Name}} = [_]{{$field.PlainType}}{ {{$field.Default}} } ** {{$field.Length}};
    {{- end}}
{{- end }}
{{- if $field.IsSlice }}
    {{- if not $field.IsNative}}
        var __{{$field.Name}}Index: usize = 0;
        while (__{{$field.Name}}Index < x.{{$field.Name}}.len) {
            {{$field.PlainType}}.Reset(&x.{{$field.Name}}[__{{$field.Name}}Index]);
            __{{$field.Name}}Index = __{{$field.Name}}Index + 1;
        }
    {{- end}}
    x.{{$field.Name}}.len = 0;
{{- end }}
{{- end }}
    }

    pub fn WriteAsRoot(x: *{{$root.Name}}, writer: *karmem.Writer) Allocator.Error!u32 {
        return {{$root.Name}}.Write(x, writer, 0);
    }

    pub fn Write(x: *{{$root.Name}}, writer: *karmem.Writer, start: usize) Allocator.Error!u32 {
        var offset: u32 = @intCast(u32, start);
        var size: u32 = {{$root.Size}};
        if (offset == 0) {
            offset = try writer.Alloc(size);
        }


        {{- if $root.IsTable }}
        var sizeData: u32 = {{$root.ContentSize}};
        karmem.Writer.WriteAt(writer, offset, @ptrCast([*]const u8, &sizeData), 4);
        {{- end }}

{{- range $field := $root.Fields }}
    {{- if or (not $field.IsInline) $field.IsArray }}
    {{- if $field.IsBasic}}
        var __{{$field.Name}}Size: usize = {{$field.AllocSize}};
    {{- else}}
        var __{{$field.Name}}Size: usize = {{$field.AllocSize}} * x.{{$field.Name}}.len;
    {{- end}}
    {{- end}}
    {{- if $field.IsInline }}
        var __{{$field.Name}}Offset = offset + {{$field.Offset}};
    {{- else }}
        var __{{$field.Name}}Offset = try writer.Alloc(__{{$field.Name}}Size);

        karmem.Writer.WriteAt(writer, offset+{{$field.Offset}}, @ptrCast([*]const u8, &__{{$field.Name}}Offset), 4);
        {{- if $field.IsSlice}}
        karmem.Writer.WriteAt(writer, offset+{{$field.Offset}}+4, @ptrCast([*]const u8, &__{{$field.Name}}Size), 4);
        var __{{$field.Name}}SizeEach: u32 = {{$field.AllocSize}};
        karmem.Writer.WriteAt(writer, offset+{{$field.Offset}}+4+4, @ptrCast([*]const u8, &__{{$field.Name}}SizeEach), 4);
        {{- end }}
    {{- end }}
    {{- if or $field.IsNative $field.IsEnum }}
        {{- if $field.IsSlice }}
            {{- if $field.IsString }}
        karmem.Writer.WriteAt(writer, __{{$field.Name}}Offset, x.{{$field.Name}}.ptr, __{{$field.Name}}Size);
            {{- else }}
        karmem.Writer.WriteAt(writer, __{{$field.Name}}Offset, @ptrCast(*[]const u8, &x.{{$field.Name}}).ptr, __{{$field.Name}}Size);
            {{- end }}
        {{- else }}
            {{- if $field.IsArray }}
        karmem.Writer.WriteAt(writer, __{{$field.Name}}Offset, @ptrCast([*]const u8, &x.{{$field.Name}}), __{{$field.Name}}Size);
            {{- else }}
        karmem.Writer.WriteAt(writer, __{{$field.Name}}Offset, @ptrCast([*]const u8, &x.{{$field.Name}}), {{$field.AllocSize}});
            {{- end }}
        {{- end }}
    {{- else }}
        {{- if $field.IsBasic}}
        _ = try {{$field.PlainType}}.Write(&x.{{$field.Name}}, writer, __{{$field.Name}}Offset);
        {{- else}}
        var __{{$field.Name}}Index: usize = 0;
        var __{{$field.Name}}End: usize = __{{$field.Name}}Offset + __{{$field.Name}}Size;
        while (__{{$field.Name}}Offset < __{{$field.Name}}End) {
            _ = try {{$field.PlainType}}.Write(&x.{{$field.Name}}[__{{$field.Name}}Index], writer, __{{$field.Name}}Offset);
            __{{$field.Name}}Offset = __{{$field.Name}}Offset + {{$field.AllocSize}};
            __{{$field.Name}}Index = __{{$field.Name}}Index + 1;
        }
        {{- end}}
    {{- end}}
{{- end}}

        return offset;
    }

    pub fn ReadAsRoot(x: *{{$root.Name}}, reader: *karmem.Reader) Allocator.Error!void {
        return {{$root.Name}}.Read(x, New{{$root.Name}}Viewer(reader, 0), reader);
    }

    pub fn Read(x: *{{$root.Name}}, viewer: *const {{$root.Name}}Viewer, reader: *karmem.Reader) Allocator.Error!void {
        if (x == undefined) {
            return;
        }
        if (reader == undefined) {
            return;
        }
        {{- range $field := $root.Fields }}

{{- if $field.IsBasic}}
    {{- if (or $field.IsEnum $field.IsNative) }}
        x.{{$field.Name}} = {{$root.Name}}Viewer.{{$field.Name}}(viewer);
    {{- else}}
        try {{$field.PlainType}}.Read(&x.{{$field.Name}}, {{$root.Name}}Viewer.{{$field.Name}}(viewer, {{- if not $field.IsInline}}reader{{- end}}), reader);
    {{- end}}
{{- else}}
    {{- if $field.IsBasic}}
        try {{$field.PlainType}}.Read(&x.{{$field.Name}}, {{$root.Name}}Viewer.{{$field.Name}}(reader), reader);
    {{- end}}
    {{- if $field.IsSlice}}
        var __{{$field.Name}}Slice: {{$field.ViewerType}} = {{$root.Name}}Viewer.{{$field.Name}}(viewer, reader);
        var __{{$field.Name}}Len: usize = __{{$field.Name}}Slice.len;
        if (__{{$field.Name}}Len > x._{{$field.Name}}Capacity) {
            var __{{$field.Name}}CapacityTarget: usize = __{{$field.Name}}Len;
            var __{{$field.Name}}Alloc = try reader.allocator.reallocAtLeast(x.{{$field.Name}}.ptr[0..x._{{$field.Name}}Capacity], __{{$field.Name}}CapacityTarget);
            var __{{$field.Name}}NewIndex: usize = x._{{$field.Name}}Capacity;
            while (__{{$field.Name}}NewIndex < __{{$field.Name}}Alloc.len) {
                {{- if $field.IsNative}}
                    {{- if $field.IsString }}
                __{{$field.Name}}Alloc[__{{$field.Name}}NewIndex] = 0;
                    {{- else }}
                __{{$field.Name}}Alloc[__{{$field.Name}}NewIndex] = {{$field.Default}};
                    {{- end }}
                {{- else }}
                __{{$field.Name}}Alloc[__{{$field.Name}}NewIndex] = New{{$field.PlainType}}();
                {{- end }}
                __{{$field.Name}}NewIndex = __{{$field.Name}}NewIndex + 1;
            }
            x.{{$field.Name}}.ptr = __{{$field.Name}}Alloc.ptr;
            x.{{$field.Name}}.len = __{{$field.Name}}Len;
            x._{{$field.Name}}Capacity = __{{$field.Name}}Alloc.len;
        }
        if (__{{$field.Name}}Len > x.{{$field.Name}}.len) {
            x.{{$field.Name}}.len = __{{$field.Name}}Len;
        }
    {{- else}}
        var __{{$field.Name}}Slice: {{$field.ViewerType}} = {{$root.Name}}Viewer.{{$field.Name}}(viewer);
        var __{{$field.Name}}Len: usize = __{{$field.Name}}Slice.len;
        if (__{{$field.Name}}Len > x.{{$field.Name}}.len) {
            __{{$field.Name}}Len = x.{{$field.Name}}.len;
        }
    {{- end }}
    {{- if $field.IsNative}}
        var __{{$field.Name}}Index: usize = 0;
        while (__{{$field.Name}}Index < __{{$field.Name}}Len) {
            x.{{$field.Name}}[__{{$field.Name}}Index] = __{{$field.Name}}Slice[__{{$field.Name}}Index];
            __{{$field.Name}}Index = __{{$field.Name}}Index + 1;
        }
        while (__{{$field.Name}}Index < x.{{$field.Name}}.len) {
            {{- if $field.IsString}}
            x.{{$field.Name}}[__{{$field.Name}}Index] = 0;
            {{- else }}
            x.{{$field.Name}}[__{{$field.Name}}Index] = {{$field.Default}};
            {{- end }}
            __{{$field.Name}}Index = __{{$field.Name}}Index + 1;
        }
    {{- else}}
        var __{{$field.Name}}Index: usize = 0;
        while (__{{$field.Name}}Index < __{{$field.Name}}Len) {
            try {{$field.PlainType}}.Read(&x.{{$field.Name}}[__{{$field.Name}}Index], &__{{$field.Name}}Slice[__{{$field.Name}}Index], reader);
             __{{$field.Name}}Index = __{{$field.Name}}Index + 1;
        }
        while (__{{$field.Name}}Index < x.{{$field.Name}}.len) {
            {{$field.PlainType}}.Reset(&x.{{$field.Name}}[__{{$field.Name}}Index]);
            __{{$field.Name}}Index = __{{$field.Name}}Index + 1;
        }
    {{- end }}
    {{- if $field.IsSlice}}
        x.{{$field.Name}}.len = __{{$field.Name}}Len;
    {{- end }}
        {{- end}}
    {{- end }}
    }

};


pub fn New{{$root.Name}}() {{$root.Name}} {
    return {{$root.Name}} {
{{- range $field := $root.Fields }}
    .{{$field.Name}} ={{- if or (and $field.IsBasic $field.IsNative) $field.IsEnum }}{{- if $field.IsEnum}} Default{{$field.Type}} {{- else }} {{$field.Default}}{{- end}}{{- else}}{{- if $field.IsBasic }} New{{$field.Type}}(){{- else}} {{- if $field.IsArray}} [_]{{$field.PlainType}}{ {{- if $field.IsNative}}{{$field.Default}}{{- else }}New{{$field.PlainType}}(){{- end}}} ** {{$field.Length}}{{- else}} {{- if $field.IsString}} &[_]u8{} {{- else }} &[_]{{$field.PlainType}}{}{{- end}}{{- end}}{{- end }}{{- end}},
    {{- if $field.IsSlice }}
    ._{{ $field.Name }}Capacity = 0,
    {{- end }}
{{- end}}
    };
}

    {{- end }}
{{end}}

{{define "struct_builder"}}
    {{- /*gotype: karmem.org/cmd/karmem/kmparser.File*/ -}}
    {{- range $root := .}}

pub const {{$root.Name}}Viewer = struct {
    _data: [{{$root.Size}}]u8,

    pub fn Size(x: *const {{$root.Name}}Viewer) u32 {
        if (x == undefined) {
            return 0xFFFFFFFF;
        }
    {{- if $root.IsTable}}
        return @ptrCast(*align(1) const u32, x._data[0..4]).*;
    {{- else}}
        return {{ $root.Size }};
    {{- end }}
    }

        {{- range $field := $root.Fields }}
    pub fn {{$field.Name}}(x: *const {{$root.Name}}Viewer{{- if not $field.IsInline}}, reader: *karmem.Reader{{- end}}) {{$field.ViewerType}} {
        if (x == undefined) {
       {{- if or (and $field.IsBasic $field.IsNative) $field.IsEnum }}
                {{- if $field.IsEnum}}
            return Default{{$field.Type}};
                {{- else}}
            return {{$field.Default}};
                {{- end}}
        {{- else}}
        {{- if or $field.IsSlice $field.IsArray }}
        {{- if $field.IsNative}}
            return {{- if $field.IsString}} &[_]u8{}{{- else }} &[_]{{$field.PlainType}}{}{{- end}};
        {{- else }}
            return &[_]{{$field.PlainType}}Viewer{};
        {{- end }}
        {{- else }}
        {{- if $field.IsNative}}
            return {{$field.Default}};
        {{- else }}
            return &Null{{$field.PlainType}}Viewer;
        {{- end }}
        {{- end }}
        {{- end}}
        }
        {{- if $root.IsTable}}
        if (({{$field.Offset}} + {{$field.Size}}) > {{$root.Name}}Viewer.Size(x)) {
        {{- if or (and $field.IsBasic $field.IsNative) $field.IsEnum }}
                {{- if $field.IsEnum}}
            return Default{{$field.Type}};
                {{- else}}
            return {{$field.Default}};
                {{- end}}
        {{- else}}
        {{- if or $field.IsSlice $field.IsArray }}
        {{- if $field.IsNative}}
            return {{- if $field.IsString}} &[_]u8{}{{- else }} &[_]{{$field.PlainType}}{}{{- end}};
        {{- else }}
            return &[_]{{$field.PlainType}}Viewer{};
        {{- end }}
        {{- else }}
        {{- if $field.IsNative}}
            return {{$field.Default}};
        {{- else }}
            return &Null{{$field.PlainType}}Viewer;
        {{- end }}
        {{- end }}
        {{- end}}
        }
        {{- end}}

        {{- if $field.IsInline}}
{{- if not $field.IsArray}}
    {{- if or $field.IsNative $field.IsEnum }}
        return @ptrCast(*align(1) const {{$field.ViewerType}}, x._data[{{$field.Offset}}..{{$field.Offset}}+@sizeOf({{$field.ViewerType}})]).*;
    {{- else}}
        return @ptrCast({{$field.ViewerType}}, x._data[{{$field.Offset}}..{{$field.Offset}}+@sizeOf({{$field.ViewerType}})]);
    {{- end}}
{{- else}}
        {{- if $field.IsNative }}
        var slice = [2]usize{@ptrToInt(x)+{{$field.Offset}}, {{$field.Length}}};
        return @ptrCast(*align(1) const {{$field.ViewerType}}, &slice).*;
        {{- else }}
        var slice = [2]usize{@ptrToInt(x)+{{$field.Offset}}, {{$field.Length}}};
        return @ptrCast(*align(1) const []{{$field.PlainType}}Viewer, &slice).*;
        {{- end }}
{{- end}}
{{- else }}
        var offset = @ptrCast(*align(1) const u32, x._data[{{$field.Offset}}..{{$field.Offset}}+4]).*;
    {{- if $field.IsSlice}}
        var size = @ptrCast(*align(1) const u32, x._data[{{$field.Offset}}+4..{{$field.Offset}}+4+4]).*;
        if (!karmem.Reader.IsValidOffset(reader, offset, size)) {
        {{- if $field.IsNative}}
            return {{- if $field.IsString}}&[_]u8{}{{- else }}&[_]{{$field.PlainType}}{}{{- end}};
        {{- else }}
            return &[_]{{$field.PlainType}}Viewer{};
        {{- end }}
        }
        var length = size / {{$field.AllocSize}};
        {{- if $field.IsLimited }}
        if (length > {{$field.Length}}) {
            length = {{$field.Length}};
        }
        {{- end }}
        var slice = [2]usize{@ptrToInt(reader.memory.ptr)+offset, length};
        return @ptrCast(*{{$field.ViewerType}}, &slice).*;
    {{- else}}
        if (!karmem.Reader.IsValidOffset(reader, offset, {{$field.MinSize}})) {
        {{- if $field.IsNative}}
            return {{$field.Default}};
        {{- else }}
            return &Null{{$field.PlainType}}Viewer;
        {{- end }}
        }
        var v = @ptrCast(*align(1) const {{$field.PlainType}}Viewer, reader.memory[offset..offset+{{$field.MinSize}}]);
        if (!karmem.Reader.IsValidOffset(reader, offset, {{$field.PlainType}}Viewer.Size(v))) {
        {{- if $field.IsNative}}
            return {{$field.Default}};
        {{- else }}
            return &Null{{$field.PlainType}}Viewer;
        {{- end }}
        }
        return v;
{{- end}}
{{- end}}
    }
{{- end}}

};

var Null{{$root.Name}}Viewer = {{$root.Name}}Viewer {
    ._data = [_]u8{0} ** {{$root.Size}}
};

pub fn New{{$root.Name}}Viewer(reader: *karmem.Reader, offset: u32) *const {{$root.Name}}Viewer {
    if (!karmem.Reader.IsValidOffset(reader, offset, {{$root.MinSize}})) {
        return &Null{{$root.Name}}Viewer;
    }
    var v = @ptrCast(*align(1) const {{$root.Name}}Viewer, reader.memory[offset..offset+{{$root.MinSize}}]);
    {{- if $root.IsTable}}
    if (!karmem.Reader.IsValidOffset(reader, offset, {{$root.Name}}Viewer.Size(v))) {
        return &Null{{$root.Name}}Viewer;
    }
    {{- end}}
    return v;
}
    {{- end }}
{{end}}